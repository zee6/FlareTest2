<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="5" MadCap:lastHeight="12855" MadCap:lastWidth="2119">
    <head>
        <link href="../Resources/Stylesheets/Collab_Srvr_Concise_Setup_CSS.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1>Integrating unblu Chat in your Mobile App</h1>
        <h2>General approach</h2>
        <p>As the unblu technology is purely web-based, it can be integrated into native mobile apps (iOS and Android) using WebViews. To make this possible, perform the following steps:</p>
        <ul>
            <li>Set up app with WebView.</li>
            <li>Integrate unblu example HTML, JS and CSS files into the project.</li>
            <li>Add the initialization of the WebView into the App.</li>
            <li>Add special configuration to the server.</li>
        </ul>
        <p>This section will go through these steps with an Android application as an example. Integrating the chat into an iOS app should work mostly the same with small adaptations.</p>
        <p>This is an example. It can be used as a base for a real project but must be adapted to fit the exact needs of the project and app.</p>
        <h2>What it looks like</h2>
        <p>Here are some screenshots of the Android example app.</p>
        <p>
            <img src="../Resources/Images/Mobile/Mobile_1_SMALLEST.png" style="mc-thumbnail: popup;mc-thumbnail-max-height: auto;" /> <img src="../Resources/Images/Mobile/Mobile_2_SMALLEST.png" style="mc-thumbnail-max-height: auto;mc-thumbnail: popup;" /> <img src="../Resources/Images/Mobile/Mobile_3_SMALLEST.png" style="mc-thumbnail-max-height: auto;mc-thumbnail: popup;" /></p>
        <h2>Prerequisites of the Native App</h2>
        <p>To start, an app is required that has an <a href="https://developer.android.com/reference/android/app/Activity.html">Activity</a> or <a href="https://developer.android.com/reference/android/app/Fragment.html">Fragment</a> which holds a <a href="https://developer.android.com/reference/android/webkit/WebView.html">WebView</a>. Basically, the WebView can be placed anywhere. However, we recommend you use the WebView as the only child of the Activity or Fragment and give it all available screen space to avoid performance problems and guarantee that the content is large enough to be usable. The example below can be used as layout.xml for your Activity or Fragment.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Layout - Example code</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <blockquote><pre xml:space="preserve" class="prettyprint"><span class="Bolder">layout</span>
&lt;WebView xmlns:android="http://schemas.android.com/apk/res/android"
   android:id="@+id/chat_webview"
   android:layout_width="match_parent"
   android:layout_height="match_parent"/&gt;</pre>
                </blockquote>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p><span class="Bolder">The second step is to setup the WebView so that it will work with unblu.</span>
        </p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>WebView setup - Example code</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve" class="prettyprint">
WebView setup
@Override
public void onCreate(Bundle savedInstanceState) {
	...
	WebView chatWebView = (WebView) findViewById(R.id.chat_webview);
	// Without JavaScript nothing will work...
	chatWebView.getSettings().setJavaScriptEnabled(true);
	chatWebView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
	// Zooming should be avoided since it doesn't feel native and not necessary since all UI's are large enough to be usable
	chatWebView.getSettings().setDisplayZoomControls(false);
	chatWebView.getSettings().setSupportZoom(false);
	// unblu uses cookies to save the session states so they must be accepted.
	CookieManager.getInstance().setAcceptCookie(true);
	if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
		// Because the unblu server may be an other one than our base URL we must also allow 3rd party cookies.
	    CookieManager.getInstance().setAcceptThirdPartyCookies(chatWebView, true);
		// Mixed content mode is necessary since we will load resources that are integrated into the app as well as external ones from the unblu server.
	    chatWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
	}

	if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
		// This will allow you to remotely debug the WebView with the Chrome browser if the app is configured to be debuggable.
 	   if (0 != (getActivity().getApplicationInfo().flags &amp;= ApplicationInfo.FLAG_DEBUGGABLE)) {
	        WebView.setWebContentsDebuggingEnabled(true);
	    }
		// Since we will load files stored in the app as well as external ones from the unblu server this must be enabled.
	    chatWebView.getSettings().setAllowUniversalAccessFromFileURLs(true);
	}
	...
}</pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>This is all that is needed to setup the WebView to be able to run unblu. The next step is to integrate and load unblu in the WebView.</p>
        <h2>Integrating unblu into the App</h2>
        <p>There are two basic approaches to integrating unblu into the app. The first one is to simply load all of the content from the web and the second one is to integrate the base files needed directly into the app. Both approaches have pros and cons. In both cases the actual unblu application is loaded from the unblu server on the internet. The files discussed here are the base HTML in which the chat will run; CSS files to style the content, as well as the javascript files that start and maintain the session using the unblu API.</p>
        <h3>Loading Resources from a Web Server</h3>
        <p><span class="Bolder">Pros</span>
        </p>
        <ul>
            <li>Very flexible since changes to the scripts can be done server side and do not need an app update.</li>
            <li>App size is not affected since no additional files are added.</li>
        </ul>
        <p><span class="Bolder">Cons</span>
        </p>
        <ul>
            <li>Slower since the files first have to be retrieved from the internet.</li>
            <li>Slightly less secure since the files are loaded from the internet.</li>
        </ul>
        <h3>Embedding Resources in the App</h3>
        <p><span class="Bolder">Pros</span>
        </p>
        <ul>
            <li>Faster, as some of the files are loaded directly from the device.</li>
            <li>Slightly more secure since the files loaded are directly located in the app.</li>
        </ul>
        <p><span class="Bolder">Cons</span>
        </p>
        <ul>
            <li>Less flexible: All changes to the resources on the device need an update of the app.</li>
            <li>Size may become larger because the files are embedded.</li>
        </ul>
        <p>Both solutions are a viable way to go. This example will show how to integrate the files in the app. Serving them from a webserver is basically the same except that the main HTML file is directly loaded from the internet and the referenced javascript and css files do not use the "file://" protocol.</p>
        <p>These are the files needed to integrate unblu into the app.</p>
        <h2>Main HTML File</h2>
        <p>The main html file is the file that is initially loaded in the WebView and will run, maintain and show the chat. Its most important job is to load the correct script files that start the session. Additionally, it should display a loading screen until the chat session is ready.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Main.html - Example code</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre class="prettyprint">&lt;!doctype html&gt;
 
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"&gt;
    &lt;title&gt;Unblu Chat Demo&lt;/title&gt;
    &lt;!-- stylesheet for this html file --&gt;
    &lt;link rel="stylesheet" href="file:///android_asset/style/main.css"&gt;
    &lt;!-- stylesheet that overrides styles of the unblu UI --&gt;
    &lt;link rel="stylesheet" href="file:///android_asset/style/unblu-override.css"&gt;
 
    &lt;script&gt;
         alert("Connect Remote Chrome Debugger now");
    &lt;/script&gt;
    &lt;!-- general util functions and poly-fills --&gt;
    &lt;script src="file:///android_asset/js/util.js"&gt;&lt;/script&gt;
    &lt;!-- wrapper of the unblu snippet that loads the unblu application --&gt;
    &lt;script src="file:///android_asset/js/unblu-snippet.js"&gt;&lt;/script&gt;
    &lt;!-- wrapper of the unblu api that allows direct starting of a chat session --&gt;
    &lt;script src="file:///android_asset/js/unblu-chat.js"&gt;&lt;/script&gt;
&lt;/head&gt;
 
&lt;body&gt;
    &lt;!-- loader that is displayed until the chat session has loaded (see main.js) --&gt;
    &lt;div id="loader-container"&gt;
        &lt;div&gt;
            &lt;div class="loader"&gt;
                &lt;span&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;div id="loader-text"&gt;
                loading...
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- main script that contains callbacks to the native app and uses the other scripts --&gt;
    &lt;script src="file:///android_asset/js/main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Main JavaScript File</h2>
        <p>Corresponding to the main.html file the main.js file does the actual initialization of the unblu application and provides functions that can be called from the mobile app as well as callbacks that should be implemented in the mobile app and provided to the WebView. This serves as an example and can be changed and extended to the needs of the actual mobile application.</p>
        <h2>Unblu Initialization</h2>
        <p>To allow the mobile application to control which unblu server and which unblu API token should be used, the main.js script expects its backing html file to be loaded with query parameters defining these.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>unblu initialization - Example code</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre class="prettyprint">mobileChatApi.initUnblu(window.getQueryParameterByName("apiKey"), window.getQueryParameterByName("server"));</pre>
                <p>So, when loading the html file initially these query parameters must be added or the unblu starter script cannot be loaded.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Function API</h2>
        <p>The following functions may be called by the mobile app by sending them to the WebView.</p><pre class="prettyprint">window.mobileChatApi.initChat(username)</pre>
        <p>Initiates a chat session with the given username.</p>
        <p>If a previous session was not terminated it will try to restore it. (Delete cookies to avoid this behaviour.)</p>
        <p>Note: Must be called after the "document-ready" event.</p>
        <p>@param username Username to be used for the chat session</p><pre class="prettyprint">window.mobileChatApi.terminateSession()</pre>
        <p>Terminates the current session.</p>
        <p>If no session is active, nothing will be done.</p>
        <h3>Callbacks</h3>
        <p>The following functions should be implemented by the mobile application and made visible to the WebView under the following prefix:</p><pre class="prettyprint">window.MobileAppApi.* </pre><pre class="prettyprint">window.MobileAppApi.onDocumentReady()</pre>
        <p>Called when the DOM document-ready event occurs.</p>
        <p><span class="Bolder">Note:</span> this is used instead of using the WebViewClient.onPageLoaded() callback</p>
        <p>since there are issues of it being called multiple times for pre-Lollipop WebViews.</p><pre class="prettyprint">window.MobileAppApi.onSessionAlreadyActive()</pre>
        <p>Called when a session is being established and a previous session could be restored.</p><pre class="prettyprint">window.MobileAppApi.onNoAgentAvailable()</pre>
        <p>Called when no agent is available for chat.</p><pre class="prettyprint">window.MobileAppApi.onSessionStarted()</pre>
        <p>Called when a new session has successfully been started</p><pre class="prettyprint">window.MobileAppApi.onSessionEnded()</pre>
        <p>Called when the current session has ended. (Either through abort or terminate.)</p><pre class="prettyprint">window.MobileAppApi.onError(String message)</pre>
        <p>Called for any error that occurred.</p>
        <p>@param message The error message</p><pre class="prettyprint">window.MobileAppApi.getStringResource(String name)</pre>
        <p>Should retrieve and return the localised text for the given key.</p>
        <p>This enables content of the WebView to display localized text provided by the app.</p>
        <p>@param name Key for the string resource to retrieve.</p>
        <p>@return Localised string representing the resource.</p>
        <h2>Additional Files</h2>
        <p>The additional files will not be explained in detail here. Look into the source code to see what they do exactly. Here is a brief overview of what they are for:</p>
        <ul>
            <li>unblu-snippet.js and unblu-chat.js utilise the public unblu api to provide the functions used in the main.js. They can also be modified to fit the needs of the specific project und unblu setup.</li>
            <li>main.css contains styles for formatting and laying out the main.html page e.g., displaying and animating the loader. This also serves as an example that should be adapted.</li>
            <li>unblu-overwidden.css hides and modifies some of the unblu user interface items which are not needed or wanted in the mobile chat scenario. This file should not be adapted.</li>
        </ul>
        <h2>Embedding the Files into the App</h2>
        <p>To embed the discussed files into the app and make them available for the WebView, they must be copied into the project's <a href="https://developer.android.com/studio/projects/index.html#ApplicationModules">assets</a> folder. To keep the folder structure clean we would advise you to use subfolders for html, js, img, style. etc. files.</p>
        <p>How these files can be accessed will be discussed in the next section.</p>
        <h1>Binding unblu and the Mobile App</h1>
        <p>Now that the WebView is setup and the resources needed are embedded in the app it is time to actually load the main.html and do the binding between the javascript running in the WebView and the native mobile application.</p>
        <h2>Providing Callbacks to the WebView</h2>
        <p>The last step of initializing the WebView is to provide it with the documented callbacks that the JavaScript code can call. To do so, a class with the respective methods and the @JavascriptInterface annotation must be programmed and set to the WebView. Each method may then react on the different events as wished by the app. Note that all of these callbacks are not called on the UI-Thread, meaning that any UI action must be posted on it, for example, using getActivity().runOnUiThread(...);</p>
        <p>The example application holds examples of what may be done in the callback methods. See:</p><pre class="prettyprint">com.unblu.mobile.android.chatdemo.UnbluChatFragment.java</pre>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>WebAppApi - example code</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre class="prettyprint">private void bindWebAppApi(WebView chatWebView){
	chatWebView.addJavascriptInterface(new WebAppApi(), "MobileAppApi");
}
 
public class WebAppApi {
	/**
 	 * Called when the DOM document-ready event occurs.
	 * Note: this is used instead of using the WebViewClient.onPageLoaded() callback 
 	 * since there are issues of it being called multiple times for pre Lollipop WebViews
 	 */
	@JavascriptInterface
	public void onDocumentReady() {...}
 
    /**
     * Called when a session is being established and a previous session could be restored.
     */
    @JavascriptInterface
    public void onSessionAlreadyActive() {...}

    /**
     * Called when no agent is available for chat.
     */
    @JavascriptInterface
    public void onNoAgentAvailable() {...}

    /**
     * Called when a new session has successfully been started
     */
    @JavascriptInterface
    public void onSessionStarted() {...}

    /**
     * Called when the current session has ended. (Either through abort or terminate)
     */
    @JavascriptInterface
    public void onSessionEnded() {...}

    /**
     * Called for any error that occurred
     * @param message The error message
     */
    @JavascriptInterface
    public void onError(String message) {...}

    /**
     * Should retrieve and return the localized text for the given key.
     * @param name Key for the string resource to retrieve.
     * @return Localized string representing the resource.
     */
    @JavascriptInterface
    public String getStringResource(String name) {...}
}</pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Loading the main.html</h2>
        <p>Now, the main.html file that we placed in the assets folder must be loaded into the WebView which will automatically initialize the unblu environment and then wait for an API-call to start the chat. Two things have to be taken into account when doing this.</p>
        <ol>
            <li><span class="Bolder">Query Parameters</span>
            </li>
        </ol>
        <p>As described in the previous section, for this example the main.html has to be loaded with query parameters for the unblu server and the unblu API key. This may be done differently for real projects depending on how the server and API key are retrieved.Base URL</p>
        <ol MadCap:continue="true">
            <li><span class="Bolder">Base URL</span>
            </li>
        </ol>
        <p>Since we are loading a local html file we do not have a valid origin if we just load it with a simple:</p><pre class="prettyprint">chatWebView.load("file://.../main.html");</pre>
        <p>Without a valid origin we will have problems with <a href="https://en.wikipedia.org/wiki/Web_Messaging">cross-document messaging</a> used by unblu as well as with communication with the unblu server which requires a valid origin.</p>
        <p>To overcome these problems the html file is loaded with a base URL which makes it act like it was provided from the given URL and therefore provides a valid origin. This URL can be any existing or non-existing URL.</p>
        <p>A second reason why this base URL is important is the filtering of Chat requests in the unblu agent desk. The base URL provided here will be displayed in the Chat queue and allows filtering. This can be used as a powerful tool to filter only the chat requests from the mobile app.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>loading main.html - Example Code </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre class="prettyprint">private static final String LOAD_URL_FORMAT = "%1$s?apiKey=%2$s&amp;server=%3$s";

@Override
public void onCreate(Bundle savedInstanceState) {
	...
	// Loads the main.html file from the assets and saves the content in a String
	String html = loadAssetContentIntoString("html/main.html");
	// Puts together the load url formed of the configured baseUrl, and the unblu API key and unblu server as query parameters.
	String loadUrl = String.format(LOAD_URL_FORMAT, baseUrl, apiKey, server);
	// Loads the html into the WebView.
	chatWebView.loadDataWithBaseURL(loadUrl, html, "text/html", "UTF-8", null);
	...
}</pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Starting a Chat Session</h2>
        <p>After the main.html is loaded the last step needed is to actually start a chat session which must be initiated from the mobile application.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Start chat - Example code </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre class="prettyprint">private static final String JS_API_START_CHAT = "javascript:mobileChatApi.initChat(\"%1$s\");";
 
@Override
public void onCreate(Bundle savedInstanceState) {
	...
	// Loads the html into the WebView.
	chatWebView.loadDataWithBaseURL(loadUrl, html, "text/html", "UTF-8", null);
 
	// Sets a callback that starts the chat with the given username as soon as the document is ready.
	setOnDocumentReadyListener(new OnDocumentReadyListener() {
  	  @Override
  	  public void onDocumentReady() {
        //Init the Chat
        chatWebView.loadUrl(String.format(JS_API_START_CHAT, username));
  	  }
	});
	...
}
 
/**
 * Sets the given callback as document ready listener.
 * The listener will be called exactly once.
 * If the document is already loaded it will directly be called, 
 * otherwise it will be called as soon as the event occurs.
 * @param onDocumentReadyListener The listener to be called when the document is ready.
 */
public void setOnDocumentReadyListener(OnDocumentReadyListener onDocumentReadyListener) {
    if (documentReady.get()) {
        onDocumentReadyListener.onDocumentReady();
    }
    this.onDocumentReadyListener = onDocumentReadyListener;
}

interface OnDocumentReadyListener {
    void onDocumentReady();
}
 
public class WebAppApi {
    /**
     * Called when the DOM document-ready event occurs.
     * Note: this is used instead of using the WebViewClient.onPageLoaded() callback
     * since there are issues of it being called multiple times for pre Lollipop WebViews
     */
    @JavascriptInterface
    public void onDocumentReady() {
        Log.d(DEBUG_TAG, "onDocumentReady");
        // Use listener to guarantee that the method is only called once
        if (!documentReady.getAndSet(true) &amp;&amp; onDocumentReadyListener != null) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    onDocumentReadyListener.onDocumentReady();
                }
            });
        }
    }
	...
}</pre>
                <p>This marks the last step needed on the client (app) side. Use the callbacks and API methods to observe and control the session flow.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h1>Configuring the Server</h1>
        <p>Unblu allows different configurations to be applied for different scopes. One of the scope options is the domain that the visitor is on. Since we are using a base URL for our mobile app, this allows us to do specific configurations for our mobile application using the domain scope.</p>
        <p>The following specific configuration flags must be set for the chat to be displayed correctly in the mobile app. As of unblu v4.0.0RC9 some of them are unofficial. That is: unsupported configuration properties that may change. These are undocumented properties and should be used at your own risk.</p>
        <p>For more details on how the configuration can be integrated into the product please refer to the documentation of <a href="../Collaboration Server Setup/Advanced Unblu Server Configuration.htm">Advanced Unblu Server Configuration</a>.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot> Server Configuration - Example code</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre class="prettyprint">&lt;configuration&gt;
	&lt;global&gt;
		&lt;!-- your normal global product configurations--&gt;
	&lt;/global&gt;
	
	&lt;!-- The base URL used to load the main.html allows us to specify a special configuration for the mobile app. --&gt;
	&lt;domain origin="http://mobile.chat.unblu.com"&gt;
		&lt;!-- unofficial internal configuration used to display the chat in fullscreen mode on the visitor side --&gt;
		&lt;property key="com.unblu.cobrowsing.chatFullscreenEnabled"&gt;true&lt;/property&gt;
		&lt;!-- unofficial internal configuration used to prevent the unblu UI to adapt its size which is not wanted for this use case --&gt;
		&lt;property key="com.unblu.platform.client.uwt.VisualViewportRoot.forceScaleNone"&gt;true&lt;/property&gt;		
		&lt;!-- unofficial internal configuration used to prevent the unblu UI from hiding when the window is scrolled which is not wanted for this use case --&gt;
        &lt;property key="com.unblu.platform.client.uwt.VisualViewportRoot.forceNoHiding"&gt;true&lt;/property&gt;
		&lt;!-- unofficial internal configuration used to prevent the chat from animating its size wich is not wanted for mobile keyboard display and hide (as of 4.1.8) --&gt;
        &lt;property key="com.unblu.core.chat.animateChat"&gt;false&lt;/property&gt;
		&lt;!-- enables starting sessions with chat instead of co-browsing --&gt;
		&lt;property key="com.unblu.cobrowsing.startWithChatOptionEnabled"&gt;true&lt;/property&gt;
		&lt;!-- prevents the chat from directly starting with co-browsing --&gt;
		&lt;property key="com.unblu.cobrowsing.visualChatEnabled"&gt;false&lt;/property&gt;
		&lt;property key="com.unblu.cobrowsing.privateBrowsingEnabled"&gt;false&lt;/property&gt;
		&lt;property key="com.unblu.cobrowsing.cobrowsingButton"&gt;false&lt;/property&gt;
		&lt;property key="com.unblu.cobrowsing.filesEnabled"&gt;false&lt;/property&gt;
		&lt;!-- prevents the engagement tab / flap to be shown while loading the chat --&gt;
		&lt;property key="com.unblu.cobrowsing.hideOfflineFlap"&gt;true&lt;/property&gt;
		&lt;!-- allows the app to detect when the session is terminated and start a new one --&gt;
		&lt;property key="com.unblu.siteintegration.endUrl"&gt;RELOAD&lt;/property&gt;
	&lt;/domain&gt;
&lt;/configuration&gt;</pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h1>Example Application</h1>
        <p>A compilation of all described steps can be found in the attached Android Unblu Chat Demo app. If the server is set up as described above it can be used out of the box simply by adding the correct configuration in the</p><pre class="prettyprint">com.unblu.mobile.android.chatdemo.MainActivityFragment.java</pre>
        <p>class.</p>
        <p>The app is based on the Android gradle build system and can be imported and used in <a href="https://developer.android.com/studio/index.html">Android Studio</a> .</p>
        <p>GitHub link: <a href="https://github.com/unblu/example-mobile-android-chat">https://github.com/unblu/example-mobile-android-chat</a></p>
        <p>&#160;</p>
    </body>
</html>